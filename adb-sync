#!/bin/bash

# TODO!!

exit 1

set -e
set -o pipefail

if [ $# -ne 2 ]; then
  echo 'Usage: Command <android-dir> <dest-dir>'
  exit 1
fi

function android_mktemp() {
  # `mktemp` on some Android devices sucks and won't work well
  # manually create them with names of UNIX timestamp
  tmp_dir=/data/local/tmp
  timestamp="$(python -c 'import time; print(int(time.time() * 1000))')"
  path=$tmp_dir/$timestamp
  if [ "$1" == "-d" ]; then
    adb shell mkdir $path
  else
    adb shell touch $path
  fi
  echo $path
}

base_dir="$(dirname "$0")"

run_variant=release
android_build_dir="$base_dir"/target/aarch64-linux-android/$run_variant
build_dir="$base_dir"/target/$run_variant

src_dir="$1"
dest_path="$2"

entry_list_file="$(mktemp)"
send_list_file="$(mktemp)"

android_bin_dir="$(android_mktemp -d)"

adb push "$android_build_dir/index" "$android_bin_dir"
adb push "$android_build_dir/send" "$android_bin_dir"

# Like rsync, if src_dir ends with a slash, use a directory with the same name as src_dir and
# later the synced files are under it.
synced_dest="$dest_path"
echo "$src_dir" | rg '.*[^/]$' >/dev/null && synced_dest="$dest_path/$(basename "$src_dir")" && (mkdir "$synced_dest" 2>/dev/null || true)

echo 'Indexing Android files...'
adb shell "$android_bin_dir/index" "$src_dir" > "$entry_list_file" && echo
echo 'Generating send list...'
"$build_dir/diff" "$entry_list_file" "$synced_dest" > "$send_list_file" && echo
echo 'Sending stream...'
adb shell "$android_bin_dir/send" "$src_dir" < "$send_list_file" \
  | pv \
  | zstd -d \
  | "$build_dir/receive" "$synced_dest" && echo Done

